"""
Base.py

Implementa uma simula√ß√£o inspirada no algoritmo de Grover utilizando busca em largura (BFS).
Aplica um or√°culo e um operador de difus√£o a cada itera√ß√£o para amplificar caminhos
que levam ao estado de aceita√ß√£o ('qf').

Autor: Emanuel Lopes Silva
Data: Julho de 2025
"""

from collections import deque, defaultdict
from typing import Tuple, Dict, List, Any
import copy


class QuantumInspiredBFS:
    """
    Simula√ß√£o de uma BFS (Busca em Largura) com refor√ßo qu√¢ntico inspirado
    no algoritmo de Grover.

    Esta classe demonstra como os princ√≠pios de or√°culo e amplifica√ß√£o de
    amplitude de Grover podem ser aplicados em uma busca cl√°ssica para
    priorizar caminhos que levam a um estado desejado. N√£o √© uma simula√ß√£o
    de uma M√°quina de Turing Qu√¢ntica em si, mas uma inspira√ß√£o h√≠brida.

    Atributos:
        tm (Any): Objeto que representa a m√°quina de Turing (ou MTQ) usada
                  para simula√ß√£o das transi√ß√µes. Espera-se que possua um
                  atributo `states` que armazene as regras de transi√ß√£o.
        max_iterations (int): N√∫mero m√°ximo de itera√ß√µes de refor√ßo (amplifica√ß√£o).
                              Quanto mais itera√ß√µes, maior o refor√ßo dos caminhos.
        final_state (str): O estado da m√°quina de Turing considerado como o
                           estado de aceita√ß√£o ou objetivo da busca.
    """

    def __init__(self, tm: Any):
        """
        Inicializa a simula√ß√£o com a m√°quina de Turing fornecida.

        Args:
            tm (Any): Objeto que representa a m√°quina de Turing com atributo 'states'.
                      Deve ter um dicion√°rio de transi√ß√µes para simular os passos.
        """
        self.tm = tm
        self.max_iterations = 5  # N√∫mero de itera√ß√µes de Grover inspiradas
        self.final_state = 'qf' # Estado objetivo que o or√°culo ir√° "marcar"

    def oracle(self, config: Tuple[tuple, int, str]) -> int:
        """
        Or√°culo qu√¢ntico simulado: retorna +1 para configura√ß√µes que incluem
        o estado final ('qf'), e -1 para as demais.

        No algoritmo de Grover, o or√°culo "marca" os estados solu√ß√£o invertendo
        sua fase. Aqui, simulamos isso retornando -1 para a amplitude.

        Args:
            config (tuple): Configura√ß√£o atual da m√°quina (fita, posi√ß√£o da cabe√ßa, estado interno).

        Returns:
            int: -1 se o estado da configura√ß√£o for igual a `self.final_state`,
                 +1 caso contr√°rio.
        """
        _, _, state = config # Desempacota a tupla de configura√ß√£o para obter o estado
        return 1 if state == self.final_state else -1 # Retorna -1 se for o estado final

    def diffusion(self, amplitudes: Dict[Tuple, float]) -> Dict[Tuple, float]:
        """
        Aplica o operador de difus√£o de Grover, simulando o espelhamento das
        amplitudes em torno da m√©dia.

        Este operador amplifica as amplitudes dos caminhos "marcados" pelo or√°culo
        e rebaixa as amplitudes dos caminhos n√£o marcados, aumentando a probabilidade
        de encontrar a solu√ß√£o. √â uma opera√ß√£o fundamental de "amplifica√ß√£o de amplitude".

        Args:
            amplitudes (dict): Dicion√°rio de amplitudes (valores reais aqui,
                                para simplifica√ß√£o) associadas a cada configura√ß√£o.
                                As chaves s√£o as configura√ß√µes da m√°quina e os valores
                                s√£o suas amplitudes.

        Returns:
            dict: Novo dicion√°rio de amplitudes ap√≥s a aplica√ß√£o do operador de difus√£o.
        """
        total = sum(amplitudes.values())

        # Calcula a amplitude m√©dia
        mean = total / len(amplitudes)
        for k in amplitudes:
            # A nova amplitude √© calculada como 2 * (m√©dia) - (amplitude antiga)
            amplitudes[k] = 2 * mean - amplitudes[k]
        return amplitudes

    def run(self, input_string: str) -> None:
        """
        Executa a simula√ß√£o BFS com refor√ßo qu√¢ntico inspirado por Grover.

        A busca em largura explora as configura√ß√µes da m√°quina camada por camada.
        Em cada itera√ß√£o, as amplitudes s√£o ajustadas pelo or√°culo e difus√£o
        para concentrar a "probabilidade" nos caminhos que levam ao estado final.

        Args:
            input_string (str): Cadeia de entrada (sequ√™ncia de s√≠mbolos) a ser
                                 processada pela m√°quina simulada.
        """
        # Configura√ß√£o inicial
        initial_config = (tuple(input_string), 0, 'q0')
        queue = deque([(initial_config, [initial_config])])
        amplitudes = defaultdict(lambda: 1.0)


        # Loop principal de itera√ß√µes de amplifica√ß√£o de Grover
        for iteration in range(self.max_iterations):
            next_queue = deque()
            new_amplitudes = defaultdict(float)

            print(f"\nüîÅ Itera√ß√£o {iteration + 1}")

            # Processa todas as configura√ß√µes da fila atual (BFS)
            while queue:
                (tape, head, state), path = queue.popleft()
                config = (tape, head, state)
                amp = amplitudes[config]

                # Aplica or√°culo (Grover: invers√£o de fase simulada)
                amp *= self.oracle(config)

                # Obt√©m transi√ß√µes da MT para esse estado e s√≠mbolo
                symbol = tape[head] if 0 <= head < len(tape) else ' '
                actions = self.tm.states.get((state, symbol), set())

                for new_state, write_sym, move in actions:
                    new_tape = list(tape)
                    new_tape[head] = write_sym
                    new_head = head + (1 if move == 'D' else -1)

                    if not (0 <= new_head < len(new_tape)):
                        continue

                    new_config = (tuple(new_tape), new_head, new_state)
                    new_path = path + [new_config]

                    new_amplitudes[new_config] += amp
                    next_queue.append((new_config, new_path))

            # Refor√ßa os caminhos prov√°veis com difus√£o (Grover amplification)
            amplitudes = self.diffusion(new_amplitudes)
            queue = next_queue

        # Seleciona o melhor caminho final com maior amplitude
        best_config = max(amplitudes, key=amplitudes.get)
        best_amp = amplitudes[best_config]

        print("\n‚úÖ Caminho mais prov√°vel ap√≥s simula√ß√£o:")
        print("Estado final:", best_config[2])
        print("Fita final:", ''.join(best_config[0]))
        print("Posi√ß√£o da cabe√ßa:", best_config[1])
        print("Amplitude:", best_amp)